import network
import time
import machine

class WiFiManager:
    """
    Classe para gerenciar a conex√£o Wi-Fi no ESP32.

    A classe permite conectar e desconectar o ESP32 de uma rede Wi-Fi, al√©m de indicar o status da conex√£o por um LED.

    Atributos:
        ssid (str): Nome da rede Wi-Fi.
        senha (str): Senha da rede Wi-Fi.
        sta_if (network.WLAN): Interface de rede no modo esta√ß√£o.
        led (machine.Pin): Pino do LED indicador de conex√£o.
    """

    def __init__(self, ssid, senha, led_pin=2):
        """
        Inicializa o gerenciador de Wi-Fi.
        
        led_pin (int, opcional): Pino do LED indicador de conex√£o. Default √© 2.
        """
        self.ssid = ssid
        self.senha = senha
        self.sta_if = network.WLAN(network.STA_IF)  # Cria a interface Wi-Fi no modo esta√ß√£o
        self.led = machine.Pin(led_pin, machine.Pin.OUT)  # Configura o LED como sa√≠da
        self.led.off()  # Mant√©m o LED desligado inicialmente

    def conectar(self, tempo_espera=10):
        """
        Conecta o ESP32 √† rede Wi-Fi.

        Args:
            tempo_espera (int, opcional): Tempo m√°ximo de espera para conex√£o (em segundos). Default √© 10.

        Returns:
            bool: Retorna True se a conex√£o for bem-sucedida, False caso contr√°rio.
        """
        self.sta_if.active(True)  # Ativa o modo Wi-Fi esta√ß√£o

        if not self.sta_if.isconnected():
            print(f"Conectando-se √† rede {self.ssid}...")
            self.sta_if.connect(self.ssid, self.senha)  # Tenta conectar √† rede

            # Aguarda a conex√£o ser estabelecida
            while not self.sta_if.isconnected() and tempo_espera > 0:
                time.sleep(1)
                tempo_espera -= 1
                print(f"Aguardando conex√£o... ({tempo_espera}s restantes)")

        # Verifica se conseguiu conectar
        if self.sta_if.isconnected():
            print("‚úÖ Conectado com sucesso!")
            print("üì° Configura√ß√µes de rede:", self.sta_if.ifconfig())  # Exibe IP, gateway, m√°scara e DNS
            self.led.on()  # Liga o LED indicando conex√£o bem-sucedida
            return True
        else:
            print("‚ùå Falha ao conectar. Verifique SSID e senha.")
            return False

    def desconectar(self):
        """
        Desconecta o ESP32 da rede Wi-Fi e desativa a interface.

        Returns:
            bool: Retorna True se a desconex√£o for bem-sucedida, False se j√° estiver desconectado.
        """
        if self.sta_if.isconnected():
            self.sta_if.disconnect()  # Desconecta da rede
            self.sta_if.active(False)  # Desativa a interface Wi-Fi
            self.led.off()  # Apaga o LED indicando desconex√£o
            print("üì¥ Wi-Fi desconectado.")
            return True
        else:
            print("‚ÑπÔ∏è O Wi-Fi j√° est√° desconectado.")
            return False


# Exemplo de uso da classe WiFiManager
if __name__ == "__main__":
    ssid = "Racho Floresta"  # Nome da rede Wi-Fi
    senha = "jujumax1969"  # Senha da rede Wi-Fi

    wifi = WiFiManager(ssid, senha)

    if wifi.conectar():
        print("üöÄ O ESP32 est√° pronto para comunica√ß√£o!")
    else:
        print("‚ö†Ô∏è N√£o foi poss√≠vel conectar ao Wi-Fi.")
